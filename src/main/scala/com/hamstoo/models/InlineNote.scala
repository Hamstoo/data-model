package com.hamstoo.models

import java.util.UUID

import com.github.dwickern.macros.NameOf.nameOf
import com.hamstoo.utils.ExtendedString
import org.joda.time.DateTime
import play.api.libs.json.{JsObject, Json}
import reactivemongo.bson.{BSONDocumentHandler, Macros}

import scala.collection.mutable
import scala.util.Random

/**
  * Data model of an inline note.  We refer to this as a "note" rather than a "comment" to help differentiate
  * between the two concepts, the latter being complementary user content.
  *
  * @param usrId    user UUID
  * @param id       inline note id, common for all versions through time
  * @param url      URL of the web page where commenting was done
  * @param uPref    binary prefix of the URL for indexing; set by class init
  * @param pos      frontend comment data, including positioning and comment text
  * @param memeId   'comment representation' id, to be implemented
  * @param timeFrom timestamp
  * @param timeThru version validity time
  */
case class InlineNote(
                       usrId: UUID,
                       id: String = Random.alphanumeric take InlineNote.ID_LENGTH mkString,
                       url: String,
                       var uPref: Option[mutable.WrappedArray[Byte]] = None,
                       pos: InlineNote.Position,
                       pageCoord: Option[PageCoord] = None,
                       memeId: Option[String] = None,
                       timeFrom: Long = DateTime.now.getMillis,
                       timeThru: Long = Long.MaxValue) extends Annotation with HasJsonPreview {
  uPref = Some(url.binaryPrefix)

  override def jsonPreview: JsObject = Json.obj(
    "id" -> id,
    "preview" -> pos.text,
    "type" -> "comment"
  )
}

object InlineNote extends BSONHandlers {

  /** Data class containing frontend comment data, that is directly serialised into and deserialized from JSON. Data
    * stored here is completely generated by frontend. */
  case class Position(path: String, text: String, offsetX: Double, offsetY: Double)

  val ID_LENGTH: Int = 16
  val USR: String = nameOf[InlineNote](_.usrId)
  val ID: String = nameOf[InlineNote](_.id)
  val POS: String = nameOf[InlineNote](_.pos)
  val PCOORD: String = nameOf[Highlight](_.pageCoord)
  val PATH: String = nameOf[Position](_.path)
  val TEXT: String = nameOf[Position](_.text)
  val OFFSETX: String = nameOf[Position](_.offsetX)
  val OFFSETY: String = nameOf[Position](_.offsetY)
  val URL: String = nameOf[InlineNote](_.url)
  val UPREF: String = nameOf[InlineNote](_.uPref)
  val MEM: String = nameOf[InlineNote](_.memeId)
  val TSTMP: String = nameOf[InlineNote](_.timeFrom)
  val TILL: String = nameOf[InlineNote](_.timeThru)
  implicit val commentposBsonHandler: BSONDocumentHandler[Position] = Macros.handler[Position]
  implicit val commentHandler: BSONDocumentHandler[InlineNote] = Macros.handler[InlineNote]
}
