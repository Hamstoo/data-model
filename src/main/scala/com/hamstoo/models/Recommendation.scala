/*
 * Copyright (C) 2017-2018 Hamstoo, Inc. <https://www.hamstoo.com>
 */
package com.hamstoo.models

import java.util.UUID

import com.github.dwickern.macros.NameOf.nameOf
import com.hamstoo.utils.{TIME_NOW, TimeStamp}
import reactivemongo.bson.{BSONDocumentHandler, Macros}

/**
  * We store user's recommendations in a mongoDB collection
  * @param userId - user's UUID
  * @param source - One of the values from RecSourceEnum (as a String).
  * @param params - detailed about what generated the recommendation(i.e. recent autogenerated keywords)
  * @param url - a URI where the recommendation is hosted
  * @param ts - the date when the recommendation was saved
  */
case class Recommendation(userId: UUID,
                          source: String,
                          params: Map[String, String],
                          url: String,
                          ts: TimeStamp = TIME_NOW) {

  /**
    * Search terms, if they exist (e.g. the generation method may not have utilized search terms at all), that were
    * used to generate the recommendation.
    */
  def searchTerms: Set[String] =
    params.getOrElse(Recommendation.PARAM_SEARCH_TERMS, "").split(" ").map(_.trim.toLowerCase).filterNot(_.isEmpty).toSet

}

object Recommendation extends BSONHandlers {

  // field names for DAO usage
  val USR      : String =      Mark.USR;        assert(USR       == nameOf[Recommendation](_.userId))
  val TIMESTAMP: String = UserStats.TIMESTAMP;  assert(TIMESTAMP == nameOf[Recommendation](_.ts))

  // arbitrary parameter names to be used as keys in Recommendation.params maps
  val PARAM_QUERY_TYPE = "queryType"
  val PARAM_SEARCH_TERMS: String = nameOf[Recommendation](_.searchTerms)

  implicit val recommendationHandler: BSONDocumentHandler[Recommendation] = Macros.handler[Recommendation]
}