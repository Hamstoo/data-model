package com.hamstoo.models

import java.util.UUID

import com.github.dwickern.macros.NameOf.nameOf
import com.hamstoo.models.Comment.{CommentPos, CommentShortcut}
import com.hamstoo.utils.ExtendedString
import org.joda.time.DateTime
import reactivemongo.bson.{BSONDocumentHandler, Macros}

import scala.collection.mutable
import scala.util.Random

/**
  * Data model of an inline comment.
  *
  * @param usrId    owner UUID
  * @param id       comment id, common for all versions
  * @param url      URL of the web page where commenting was done
  * @param uPref    binary prefix of the URL for indexing; set by class init
  * @param pos      frontend comment data, including positioning and comment text
  * @param memeId   'comment representation' id, to be implemented
  * @param timeFrom timestamp
  * @param timeThru version validity time
  */
case class Comment(
                    usrId: UUID,
                    id: String = Random.alphanumeric take Comment.ID_LENGTH mkString,
                    url: String,
                    var uPref: Option[mutable.WrappedArray[Byte]] = None,
                    pos: CommentPos,
                    pageCoord: Option[PageCoord] = None,
                    memeId: Option[String] = None,
                    timeFrom: Long = DateTime.now.getMillis,
                    timeThru: Long = Long.MaxValue) extends Sortable with HasShortcut[CommentShortcut] {
  uPref = Some(url.prefx)

  def shortcut: CommentShortcut = CommentShortcut(id, pos.text)
}

object Comment extends BSONHandlers {

  /** Data class containing frontend comment data, that is directly serialised into and deserialized from JSON. Data
    * stored here is completely generated by frontend. */
  case class CommentPos(path: String, text: String, offsetX: Double, offsetY: Double)

  case class CommentShortcut(id: String, preview: String)

  val ID_LENGTH: Int = 16
  val USR: String = nameOf[Comment](_.usrId)
  val ID: String = nameOf[Comment](_.id)
  val POS: String = nameOf[Comment](_.pos)
  val PCOORD: String = nameOf[Highlight](_.pageCoord)
  val PATH: String = nameOf[CommentPos](_.path)
  val TEXT: String = nameOf[CommentPos](_.text)
  val OFFSETX: String = nameOf[CommentPos](_.offsetX)
  val OFFSETY: String = nameOf[CommentPos](_.offsetY)
  val URL: String = nameOf[Comment](_.url)
  val UPRF: String = nameOf[Comment](_.uPref)
  val MEM: String = nameOf[Comment](_.memeId)
  val TSTMP: String = nameOf[Comment](_.timeFrom)
  val TILL: String = nameOf[Comment](_.timeThru)
  implicit val commentposBsonHandler: BSONDocumentHandler[CommentPos] = Macros.handler[CommentPos]
  implicit val commentHandler: BSONDocumentHandler[Comment] = Macros.handler[Comment]
}
