package com.hamstoo.stream

import com.hamstoo.utils.{ObjectId, TimeStamp}

/**
  * TODO: should there just be a DatumId trait and have times be part of that trait?
  */
trait EntityId
case class ReprId(id: ObjectId) extends EntityId
case class CompoundId(ids: Set[EntityId]) extends EntityId

/**
  * A `Datum` (singular) is a (single) datapoint corresponding to some entity at some point in time.  The
  * data type is determined by the collection or stream that holds the data set to which the datum belongs.
  *
  * @param id          Entity ID to which this datum belongs
  * @param sourceTime  Source/event/producer time when datum was generated by its source
  * @param knownTime   Ingestion/processing/consumer time when datum became known to the receiving system
  *                    http://blog.colinbreck.com/considering-time-in-a-streaming-data-system/
  *                    TODO: should knownTime even be part of a Datum?  Or merely gotten from the current time sink?
  * @param value       The value of this datapoint
  */
case class Datum[T](id: EntityId, sourceTime: TimeStamp, knownTime: TimeStamp, value: T)


object Datum {

  /** Shortcut if the two timestamps are the same. */
  def apply[T](id: EntityId, ts: TimeStamp, value: T): Datum[T] = Datum(id, ts, ts, value)
}