package com.hamstoo.stream

import akka.NotUsed
import akka.stream.scaladsl.Source
import com.hamstoo.utils.TimeStamp
import play.api.Logger

/**
  * A wrapper around an Akka Stream.
  * @tparam T
  */
trait DataStream[T] {

  val logger: Logger = Logger(classOf[DataStream[T]])

  trait EntityId
  case class ReprId(id: String) extends EntityId

  /**
    * A `Datum` (singular) is a (single) datapoint corresponding to some entity at some point in time.  The
    * data type is determined by the collection or stream that holds the data set to which the datum belongs.
    *
    * @param id          Entity ID to which this datum belongs
    * @param sourceTime  Source time when datum was generated by its source
    * @param knownTime   Ingestion time when datum became known to the receiving system
    *                    http://blog.colinbreck.com/considering-time-in-a-streaming-data-system/
    * @param value       The value of this datapoint
    */
  case class Datum(id: EntityId, sourceTime: TimeStamp, knownTime: TimeStamp, value: T)

  /** Pure virtual to be defined by implementation. */
  def source: Source[Datum, NotUsed]
}
